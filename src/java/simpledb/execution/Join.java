package simpledb.execution;

import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;
import simpledb.transaction.TransactionAbortedException;

import java.io.Serial;
import java.util.NoSuchElementException;
import java.util.Objects;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {
    @Serial
    private static final long serialVersionUID = -1056607943416974883L;

    private final JoinPredicate predicate;
    private OpIterator child1;
    private OpIterator child2;

    /**
     * Constructor. Accepts two children to join and the predicate to join them on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        this.predicate = p;
        this.child1 = child1;
        this.child2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        return this.predicate;
    }

    /**
     * @return the field name of join field1. Should be quantified by alias or table name.
     */
    public String getJoinField1Name() {
        return this.getJoinFieldName(this.predicate.getField1(), this.child1);
    }

    /**
     * @return the field name of join field2. Should be quantified by alias or table name.
     */
    public String getJoinField2Name() {
        return this.getJoinFieldName(this.predicate.getField2(), this.child2);
    }

    private String getJoinFieldName(int index, OpIterator child) {
        return child.getTupleDesc().getFieldName(index);
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     * implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(this.child1.getTupleDesc(), this.child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException, TransactionAbortedException {
        super.open();
        this.child1.open();
        this.child2.open();
        this.next1 = null;
        this.next2 = null;
    }

    public void close() {
        super.close();
        this.child1.close();
        this.child2.close();
        this.next1 = null;
        this.next2 = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        this.child1.rewind();
        this.child2.rewind();
        this.next1 = null;
        this.next2 = null;
    }

    private Tuple next1;
    private Tuple next2;

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // 连接查询采用笛卡尔积，采用嵌套循环连接的方式
        if (Objects.isNull(next1)) {
            // 初始化的场景
            if (child1.hasNext()) {
                next1 = child1.next();
                next2 = null;
            }
        }
        // 循环嵌套连接
        while (Objects.nonNull(next1)) {
            if (child2.hasNext()) {
                next2 = child2.next();
                if (predicate.filter(next1, next2)) {
                    break;
                }
            } else if (child1.hasNext()) {
                next1 = child1.next();
                child2.rewind();
                next2 = null;
            } else {
                next1 = null;
                next2 = null;
            }
        }
        // 返回结果，合并两行数据
        Tuple mergedTuple = null;
        if (Objects.nonNull(next1) && Objects.nonNull(next2)) {
            mergedTuple = new Tuple(this.getTupleDesc());
            int numField1 = next1.getTupleDesc().numFields();
            int numField2 = next2.getTupleDesc().numFields();
            for (int i = 0; i < numField1; ++i) {
                mergedTuple.setField(i, next1.getField(i));
            }
            for (int i = 0; i < numField2; ++i) {
                mergedTuple.setField(numField1 + i, next2.getField(i));
            }
        }
        return mergedTuple;
    }

    @Override
    public OpIterator[] getChildren() {
        return new OpIterator[]{this.child1, this.child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        this.child1 = children[0];
        this.child2 = children[1];
    }

}
